import * as React from 'react';
import { BaseButtonProps } from '../BaseButton';
import { FlexComponent } from '../Flex';
declare const SIZES: readonly ["S", "M", "L"];
declare const VARIANTS: readonly ["tertiary", "secondary"];
type IconButtonSize = (typeof SIZES)[number];
type IconButtonVariant = (typeof VARIANTS)[number];
type IconButtonProps<C extends React.ElementType = 'button'> = BaseButtonProps<C> & {
    children: React.ReactNode;
    /**
     * This isn't visually rendererd, but required for accessibility.
     */
    label: string;
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
    /**
     * @default 'S'
     */
    size?: IconButtonSize;
    /**
     * @default 'tertiary'
     */
    variant?: IconButtonVariant;
    /**
     * @default true
     */
    withTooltip?: boolean;
};
declare const IconButton: <C extends React.ElementType<any, keyof React.JSX.IntrinsicElements> = "button">(props: React.PropsWithoutRef<IconButtonProps<C>> & React.RefAttributes<unknown>) => React.ReactNode;
type IconButtonComponent<C extends React.ElementType = 'button'> = (props: IconButtonProps<C>) => React.ReactNode;
declare const IconButtonGroup: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<Omit<Omit<import("../Flex").FlexProps<"div">, "ref"> & React.RefAttributes<unknown>, "ref"> & {
    ref?: ((instance: unknown) => void) | React.RefObject<unknown> | null | undefined;
}, never>> & string & Omit<FlexComponent, keyof React.Component<any, {}, any>>;
export { IconButton, IconButtonGroup };
export type { IconButtonProps, IconButtonComponent, IconButtonSize, IconButtonVariant };
//# sourceMappingURL=IconButton.d.ts.map