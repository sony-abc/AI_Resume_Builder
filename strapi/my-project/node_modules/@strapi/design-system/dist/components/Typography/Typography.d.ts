import * as React from 'react';
import { type CSSProperties, type DefaultTheme } from 'styled-components';
import { type TEXT_VARIANTS } from '../../styles/type';
import { DefaultThemeOrCSSProp, PolymorphicComponentPropsWithRef } from '../../types';
import { BoxProps } from '../Box';
interface TransientTypographyProps {
    ellipsis?: boolean;
    fontSize?: keyof DefaultTheme['fontSizes'];
    fontWeight?: keyof DefaultTheme['fontWeights'];
    lineHeight?: DefaultThemeOrCSSProp<'lineHeights', 'lineHeight'>;
    textAlign?: CSSProperties['textAlign'];
    textColor?: DefaultThemeOrCSSProp<'colors', 'color'>;
    textDecoration?: CSSProperties['textDecoration'];
    textTransform?: CSSProperties['textTransform'];
    variant?: (typeof TEXT_VARIANTS)[number];
}
type TypographyProps<C extends React.ElementType = 'span'> = Omit<BoxProps<C>, 'ref'> & TransientTypographyProps;
declare const Typography: TypographyComponent<"span">;
type TypographyComponent<C extends React.ElementType = 'span'> = <T extends React.ElementType = C>(props: PolymorphicComponentPropsWithRef<T, TypographyProps<T>>) => JSX.Element;
export { Typography };
export type { TypographyProps, TypographyComponent, TransientTypographyProps };
//# sourceMappingURL=Typography.d.ts.map