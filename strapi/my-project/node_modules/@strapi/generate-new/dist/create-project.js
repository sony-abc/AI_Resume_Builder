"use strict";
const path = require("path");
const fse = require("fs-extra");
const chalk = require("chalk");
const execa = require("execa");
const stopProcess = require("./utils/stop-process.js");
const usage = require("./utils/usage.js");
const mergeTemplate = require("./utils/merge-template.js");
const git = require("./utils/git.js");
const package_json = require("./resources/json/common/package.json.js");
const jsconfig_json = require("./resources/json/js/jsconfig.json.js");
const tsconfigAdmin_json = require("./resources/json/ts/tsconfig-admin.json.js");
const tsconfigServer_json = require("./resources/json/ts/tsconfig-server.json.js");
const database = require("./resources/templates/database.js");
const env = require("./resources/templates/env.js");
const types = require("./types.js");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const fse__default = /* @__PURE__ */ _interopDefault(fse);
const chalk__default = /* @__PURE__ */ _interopDefault(chalk);
const execa__default = /* @__PURE__ */ _interopDefault(execa);
const resources = path.join(__dirname, "resources");
async function createProject(scope) {
  console.log(`Creating a new Strapi application at ${chalk__default.default.green(scope.rootPath)}.
`);
  const { rootPath, useTypescript } = scope;
  if (!scope.isQuickstart) {
    await usage.trackUsage({ event: "didChooseCustomDatabase", scope });
  } else {
    await usage.trackUsage({ event: "didChooseQuickstart", scope });
  }
  try {
    const language = useTypescript ? "ts" : "js";
    await fse__default.default.copy(path.join(resources, "files", language), rootPath);
    await fse__default.default.writeFile(path.join(rootPath, ".env"), env());
    const copyDotFilesFromSubDirectory = (subDirectory) => {
      const files = fse__default.default.readdirSync(path.join(resources, "dot-files", subDirectory));
      return Promise.all(
        files.map((file) => {
          const src = path.join(resources, "dot-files", subDirectory, file);
          const dest = path.join(rootPath, `.${file}`);
          return fse__default.default.copy(src, dest);
        })
      );
    };
    copyDotFilesFromSubDirectory("common");
    await usage.trackUsage({ event: "didCopyProjectFiles", scope });
    await package_json(scope);
    await usage.trackUsage({ event: "didWritePackageJSON", scope });
    if (useTypescript) {
      const tsConfigs = [
        {
          path: "src/admin/tsconfig.json",
          content: tsconfigAdmin_json()
        },
        {
          path: "tsconfig.json",
          content: tsconfigServer_json()
        }
      ];
      for (const { path: path$1, content } of tsConfigs) {
        await fse__default.default.writeJSON(path.join(rootPath, path$1), content, { spaces: 2 });
      }
    } else {
      await fse__default.default.writeJSON(path.join(rootPath, "jsconfig.json"), jsconfig_json(), { spaces: 2 });
    }
    await fse__default.default.ensureDir(path.join(rootPath, "node_modules"));
    await fse__default.default.appendFile(path.join(rootPath, ".env"), database.generateDbEnvVariables(scope));
    await fse__default.default.writeFile(
      path.join(rootPath, `config/database.${language}`),
      database.createDatabaseConfig({ useTypescript })
    );
    await usage.trackUsage({ event: "didCopyConfigurationFiles", scope });
    const hasTemplate = Boolean(scope.template);
    if (hasTemplate) {
      try {
        await mergeTemplate(scope, rootPath);
      } catch (error) {
        if (error instanceof Error) {
          throw new Error(`⛔️ Template installation failed: ${error.message}`);
        }
        throw error;
      }
    }
  } catch (err) {
    await fse__default.default.remove(scope.rootPath);
    throw err;
  }
  await usage.trackUsage({ event: "willInstallProjectDependencies", scope });
  console.log(`Installing dependencies with ${chalk__default.default.bold(scope.packageManager)}
`);
  try {
    if (scope.installDependencies !== false) {
      await runInstall(scope);
    }
    console.log(`Dependencies installed ${chalk__default.default.green("successfully")}.`);
    await usage.trackUsage({ event: "didInstallProjectDependencies", scope });
  } catch (error) {
    const stderr = types.isStderrError(error) ? error.stderr : "";
    await usage.trackUsage({
      event: "didNotInstallProjectDependencies",
      scope,
      error: stderr.slice(-1024)
    });
    console.log(
      chalk__default.default.bold(
        "Oh, it seems that you encountered errors while installing dependencies in your project."
      )
    );
    console.log(`Don't give up, your project was created correctly.`);
    console.log(
      `Fix the issues mentioned in the installation errors and try to run the following command`
    );
    console.log();
    console.log(`cd ${chalk__default.default.green(rootPath)} && ${chalk__default.default.cyan(scope.packageManager)} install`);
    console.log();
    stopProcess();
  }
  await usage.trackUsage({ event: "didCreateProject", scope });
  if (await git(rootPath)) {
    console.log("Initialized a git repository.");
    console.log();
  }
  console.log();
  console.log(`Your application was created at ${chalk__default.default.green(rootPath)}.
`);
  const cmd = chalk__default.default.cyan(`${scope.packageManager} run`);
  console.log("Available commands in your project:");
  console.log();
  console.log(`  ${cmd} develop`);
  console.log(
    "  Start Strapi in watch mode. (Changes in Strapi project files will trigger a server restart)"
  );
  console.log();
  console.log(`  ${cmd} start`);
  console.log("  Start Strapi without watch mode.");
  console.log();
  console.log(`  ${cmd} build`);
  console.log("  Build Strapi admin panel.");
  console.log();
  console.log(`  ${cmd} deploy`);
  console.log("  Deploy Strapi project.");
  console.log();
  console.log(`  ${cmd} strapi`);
  console.log(`  Display all available commands.`);
  console.log();
  console.log("You can start by doing:");
  console.log();
  console.log(`  ${chalk__default.default.cyan("cd")} ${rootPath}`);
  console.log(`  ${cmd} develop`);
  console.log();
  if (scope.runApp !== true)
    return;
  console.log(`Running your Strapi application.`);
  try {
    await usage.trackUsage({ event: "willStartServer", scope });
    await execa__default.default("npm", ["run", "develop"], {
      stdio: "inherit",
      cwd: scope.rootPath,
      env: {
        FORCE_COLOR: "1"
      }
    });
  } catch (error) {
    if (typeof error === "string" || error instanceof Error) {
      await usage.trackUsage({
        event: "didNotStartServer",
        scope,
        error
      });
    }
    process.exit(1);
  }
}
const installArguments = ["install"];
const installArgumentsMap = {
  npm: ["--legacy-peer-deps"],
  yarn: ["--network-timeout 1000000"],
  pnpm: []
};
function runInstall({ rootPath, packageManager }) {
  const options = {
    cwd: rootPath,
    stdio: "inherit",
    env: {
      ...process.env,
      NODE_ENV: "development"
    }
  };
  if (packageManager in installArgumentsMap) {
    installArguments.push(...installArgumentsMap[packageManager] ?? []);
  }
  return execa__default.default(packageManager, installArguments, options);
}
module.exports = createProject;
//# sourceMappingURL=create-project.js.map
