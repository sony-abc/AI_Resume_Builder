{"version":3,"file":"types.js","sources":["../src/types.ts"],"sourcesContent":["export type PackageManager = 'npm' | 'yarn' | 'pnpm';\n\nexport interface Scope {\n  name?: string;\n  rootPath: string;\n  template?: string;\n  strapiVersion: string;\n  installDependencies?: boolean;\n  devDependencies: Record<string, string>;\n  dependencies: Record<string, string>;\n  docker: boolean;\n  packageManager: PackageManager;\n  runApp: boolean;\n  isQuickstart?: boolean;\n  uuid?: string;\n  deviceId?: string;\n  database: DatabaseInfo;\n  tmpPath: string;\n  packageJsonStrapi: Record<string, unknown>;\n  useTypescript: boolean;\n}\n\nexport interface Options {\n  directory: string;\n\n  packageManager: PackageManager;\n\n  runApp?: boolean;\n  template?: string;\n\n  isQuickstart?: boolean;\n\n  useTypescript: boolean;\n\n  database: {\n    client: ClientName;\n    connection?: {\n      host?: string;\n      port?: string;\n      database?: string;\n      username?: string;\n      password?: string;\n      filename?: string;\n      ssl?: boolean;\n    };\n  };\n}\n\nexport type ClientName = 'mysql' | 'postgres' | 'sqlite';\n\nexport interface DatabaseInfo {\n  client: ClientName;\n  connection?: {\n    host?: string;\n    port?: string;\n    database?: string;\n    username?: string;\n    password?: string;\n    filename?: string;\n    ssl?: boolean;\n  };\n}\n\nexport interface PackageInfo {\n  name: string;\n  version: string;\n}\n\nexport interface TemplateConfig {\n  package: Record<string, unknown>;\n}\n\nexport interface StderrError extends Error {\n  stderr: string;\n}\n\nexport function isStderrError(error: unknown): error is StderrError {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    'stderr' in error &&\n    typeof error.stderr === 'string'\n  );\n}\n"],"names":[],"mappings":";;AA4EO,SAAS,cAAc,OAAsC;AAEhE,SAAA,OAAO,UAAU,YACjB,UAAU,QACV,YAAY,SACZ,OAAO,MAAM,WAAW;AAE5B;;"}