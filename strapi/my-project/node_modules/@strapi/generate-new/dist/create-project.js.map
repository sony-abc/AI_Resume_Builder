{"version":3,"file":"create-project.js","sources":["../src/create-project.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\nimport { join } from 'path';\nimport fse from 'fs-extra';\nimport chalk from 'chalk';\nimport execa from 'execa';\n\nimport stopProcess from './utils/stop-process';\nimport { trackUsage } from './utils/usage';\nimport mergeTemplate from './utils/merge-template.js';\nimport tryGitInit from './utils/git';\n\nimport createPackageJSON from './resources/json/common/package.json';\nimport jsconfig from './resources/json/js/jsconfig.json';\nimport adminTsconfig from './resources/json/ts/tsconfig-admin.json';\nimport serverTsconfig from './resources/json/ts/tsconfig-server.json';\nimport { createDatabaseConfig, generateDbEnvVariables } from './resources/templates/database';\nimport createEnvFile from './resources/templates/env';\nimport { Scope, isStderrError } from './types';\n\nconst resources = join(__dirname, 'resources');\n\nexport default async function createProject(scope: Scope) {\n  console.log(`Creating a new Strapi application at ${chalk.green(scope.rootPath)}.\\n`);\n\n  const { rootPath, useTypescript } = scope;\n\n  if (!scope.isQuickstart) {\n    await trackUsage({ event: 'didChooseCustomDatabase', scope });\n  } else {\n    await trackUsage({ event: 'didChooseQuickstart', scope });\n  }\n\n  try {\n    const language = useTypescript ? 'ts' : 'js';\n\n    // copy files\n    await fse.copy(join(resources, 'files', language), rootPath);\n\n    // copy dot files\n    await fse.writeFile(join(rootPath, '.env'), createEnvFile());\n\n    const copyDotFilesFromSubDirectory = (subDirectory: string) => {\n      const files = fse.readdirSync(join(resources, 'dot-files', subDirectory));\n\n      return Promise.all(\n        files.map((file) => {\n          const src = join(resources, 'dot-files', subDirectory, file);\n          const dest = join(rootPath, `.${file}`);\n          return fse.copy(src, dest);\n        })\n      );\n    };\n\n    // Copy common dot files\n    copyDotFilesFromSubDirectory('common');\n\n    await trackUsage({ event: 'didCopyProjectFiles', scope });\n\n    await createPackageJSON(scope);\n\n    await trackUsage({ event: 'didWritePackageJSON', scope });\n\n    if (useTypescript) {\n      const tsConfigs = [\n        {\n          path: 'src/admin/tsconfig.json',\n          content: adminTsconfig(),\n        },\n        {\n          path: 'tsconfig.json',\n          content: serverTsconfig(),\n        },\n      ];\n\n      for (const { path, content } of tsConfigs) {\n        await fse.writeJSON(join(rootPath, path), content, { spaces: 2 });\n      }\n    } else {\n      await fse.writeJSON(join(rootPath, 'jsconfig.json'), jsconfig(), { spaces: 2 });\n    }\n\n    // ensure node_modules is created\n    await fse.ensureDir(join(rootPath, 'node_modules'));\n\n    // create config/database\n    await fse.appendFile(join(rootPath, '.env'), generateDbEnvVariables(scope));\n    await fse.writeFile(\n      join(rootPath, `config/database.${language}`),\n      createDatabaseConfig({ useTypescript })\n    );\n\n    await trackUsage({ event: 'didCopyConfigurationFiles', scope });\n\n    // merge template files if a template is specified\n    const hasTemplate = Boolean(scope.template);\n    if (hasTemplate) {\n      try {\n        await mergeTemplate(scope, rootPath);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new Error(`⛔️ Template installation failed: ${error.message}`);\n        }\n\n        throw error;\n      }\n    }\n  } catch (err) {\n    await fse.remove(scope.rootPath);\n    throw err;\n  }\n\n  await trackUsage({ event: 'willInstallProjectDependencies', scope });\n\n  console.log(`Installing dependencies with ${chalk.bold(scope.packageManager)}\\n`);\n\n  try {\n    if (scope.installDependencies !== false) {\n      await runInstall(scope);\n    }\n\n    console.log(`Dependencies installed ${chalk.green('successfully')}.`);\n\n    await trackUsage({ event: 'didInstallProjectDependencies', scope });\n  } catch (error) {\n    const stderr = isStderrError(error) ? error.stderr : '';\n\n    await trackUsage({\n      event: 'didNotInstallProjectDependencies',\n      scope,\n      error: stderr.slice(-1024),\n    });\n\n    console.log(\n      chalk.bold(\n        'Oh, it seems that you encountered errors while installing dependencies in your project.'\n      )\n    );\n    console.log(`Don't give up, your project was created correctly.`);\n    console.log(\n      `Fix the issues mentioned in the installation errors and try to run the following command`\n    );\n    console.log();\n    console.log(`cd ${chalk.green(rootPath)} && ${chalk.cyan(scope.packageManager)} install`);\n    console.log();\n\n    stopProcess();\n  }\n\n  await trackUsage({ event: 'didCreateProject', scope });\n\n  // Init git\n  if (await tryGitInit(rootPath)) {\n    console.log('Initialized a git repository.');\n    console.log();\n  }\n\n  console.log();\n  console.log(`Your application was created at ${chalk.green(rootPath)}.\\n`);\n\n  const cmd = chalk.cyan(`${scope.packageManager} run`);\n\n  console.log('Available commands in your project:');\n  console.log();\n  console.log(`  ${cmd} develop`);\n  console.log(\n    '  Start Strapi in watch mode. (Changes in Strapi project files will trigger a server restart)'\n  );\n  console.log();\n  console.log(`  ${cmd} start`);\n  console.log('  Start Strapi without watch mode.');\n  console.log();\n  console.log(`  ${cmd} build`);\n  console.log('  Build Strapi admin panel.');\n  console.log();\n  console.log(`  ${cmd} deploy`);\n  console.log('  Deploy Strapi project.');\n  console.log();\n  console.log(`  ${cmd} strapi`);\n  console.log(`  Display all available commands.`);\n  console.log();\n  console.log('You can start by doing:');\n  console.log();\n  console.log(`  ${chalk.cyan('cd')} ${rootPath}`);\n  console.log(`  ${cmd} develop`);\n  console.log();\n\n  if (scope.runApp !== true) return;\n\n  console.log(`Running your Strapi application.`);\n\n  try {\n    await trackUsage({ event: 'willStartServer', scope });\n\n    await execa('npm', ['run', 'develop'], {\n      stdio: 'inherit',\n      cwd: scope.rootPath,\n      env: {\n        FORCE_COLOR: '1',\n      },\n    });\n  } catch (error) {\n    if (typeof error === 'string' || error instanceof Error) {\n      await trackUsage({\n        event: 'didNotStartServer',\n        scope,\n        error,\n      });\n    }\n    process.exit(1);\n  }\n}\n\nconst installArguments = ['install'];\n\nconst installArgumentsMap = {\n  npm: ['--legacy-peer-deps'],\n  yarn: ['--network-timeout 1000000'],\n  pnpm: [],\n};\n\nfunction runInstall({ rootPath, packageManager }: Scope) {\n  const options: execa.Options = {\n    cwd: rootPath,\n    stdio: 'inherit',\n    env: {\n      ...process.env,\n      NODE_ENV: 'development',\n    },\n  };\n\n  if (packageManager in installArgumentsMap) {\n    installArguments.push(...(installArgumentsMap[packageManager] ?? []));\n  }\n\n  return execa(packageManager, installArguments, options);\n}\n"],"names":["join","chalk","trackUsage","fse","createEnvFile","createPackageJSON","adminTsconfig","serverTsconfig","path","jsconfig","generateDbEnvVariables","createDatabaseConfig","isStderrError","tryGitInit","execa"],"mappings":"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"}