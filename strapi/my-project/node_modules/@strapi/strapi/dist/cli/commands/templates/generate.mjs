import { createCommand } from "commander";
import { resolve, join, basename } from "path";
import fse from "fs-extra";
import chalk from "chalk";
import inquirer from "inquirer";
import { runAction } from "../../utils/helpers.mjs";
const TEMPLATE_CONTENT = ["src", "data"];
async function copyContent(templatePath, rootBase) {
  for (const item of TEMPLATE_CONTENT) {
    try {
      const pathToCopy = join(process.cwd(), item);
      if (!await fse.pathExists(pathToCopy)) {
        continue;
      }
      await fse.copy(pathToCopy, join(templatePath, item));
      const currentProjectBase = basename(process.cwd());
      console.log(
        `${chalk.green(
          "success"
        )}: copy ${currentProjectBase}/${item} => ${rootBase}/template/${item}`
      );
    } catch (error) {
      if (error instanceof Error) {
        console.error(`${chalk.red("error")}: ${error.message}`);
      }
    }
  }
}
async function writeTemplateJson(rootPath) {
  try {
    await fse.writeJSON(join(rootPath, "template.json"), {});
    console.log(`${chalk.green("success")}: create JSON config file`);
  } catch (error) {
    if (error instanceof Error) {
      console.error(`${chalk.red("error")}: ${error.message}`);
    }
  }
}
async function templateConfigExists(rootPath) {
  const configExists = await fse.pathExists(join(rootPath, "template.json"));
  console.log(`checking: ${join(rootPath, "template.json")}. result ${configExists}`);
  return configExists;
}
const action = async function generateTemplate(directory) {
  const rootPath = resolve(directory);
  const templatePath = join(rootPath, "template");
  const exists = await fse.pathExists(templatePath);
  const rootBase = basename(rootPath);
  if (exists) {
    const inquiry = await inquirer.prompt({
      type: "confirm",
      name: "confirm",
      message: `${chalk.yellow(rootBase)} already exists.  Do you want to replace it?`
    });
    if (!inquiry.confirm) {
      process.exit(0);
    }
  }
  await fse.ensureDir(templatePath);
  await copyContent(templatePath, rootBase);
  const configExists = await templateConfigExists(rootPath);
  if (!configExists) {
    await writeTemplateJson(rootPath);
  }
  console.log(`${chalk.green("success")}: generated template at ${chalk.yellow(rootPath)}`);
};
const command = () => {
  return createCommand("templates:generate <directory>").description("Generate template from Strapi project").action(runAction("templates:generate", action));
};
export {
  action,
  command
};
//# sourceMappingURL=generate.mjs.map
