type AnyFunc = (...args: any) => any;
type PipeArgs<F extends AnyFunc[], PrevReturn = Parameters<F[0]>[0]> = F extends [
    (arg: any) => infer B
] ? [
    (arg: PrevReturn extends Promise<infer PrevResolvedReturn> ? PrevResolvedReturn : PrevReturn) => B
] : F extends [(arg: any) => infer B, ...infer Tail] ? Tail extends AnyFunc[] ? [
    (arg: PrevReturn extends Promise<infer PrevResolvedReturn> ? PrevResolvedReturn : PrevReturn) => B,
    ...PipeArgs<Tail, B>
] : [] : [];
export declare function pipe<F extends AnyFunc[], FirstFn extends F[0]>(...fns: PipeArgs<F> extends F ? F : PipeArgs<F>): (...args: Parameters<FirstFn>) => Promise<F extends [...AnyFunc[], (...arg: any) => infer R] ? R extends Promise<infer InnerType> ? InnerType : R : never>;
export declare const map: (...args: any[]) => any;
export declare const reduce: (mixedArray: any[]) => <T>(iteratee: AnyFunc, initialValue?: T | undefined) => Promise<T | undefined>;
export {};
//# sourceMappingURL=async.d.ts.map