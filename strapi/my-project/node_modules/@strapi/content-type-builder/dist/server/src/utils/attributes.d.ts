import type { Schema } from '@strapi/types';
export declare const isConfigurable: (attribute: Schema.Attribute.AnyAttribute) => boolean;
export declare const isRelation: (attribute: Schema.Attribute.AnyAttribute) => boolean;
/**
 * Formats a component's attributes
 */
export declare const formatAttributes: (model: any) => any;
/**
 * Formats a component attribute
 */
export declare const formatAttribute: (attribute: Schema.Attribute.AnyAttribute & Record<string, any>) => (Schema.Attribute.OfType<"biginteger"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<string> & Schema.Attribute.MinMaxOption<string> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Schema.Attribute.UniqueOption & Record<string, any>) | (Schema.Attribute.OfType<"boolean"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<boolean> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"blocks"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"component"> & Schema.Attribute.ComponentProperties<`${string}.${string}`, boolean> & Schema.Attribute.ConfigurableOption & Schema.Attribute.MinMaxOption<number> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"datetime"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<Schema.Attribute.DateTimeValue> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.UniqueOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"date"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<Schema.Attribute.DateValue> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.UniqueOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"decimal"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<number> & Schema.Attribute.MinMaxOption<number> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Schema.Attribute.UniqueOption & Record<string, any>) | (Schema.Attribute.OfType<"dynamiczone"> & Schema.Attribute.DynamicZoneProperties<`${string}.${string}`[]> & Schema.Attribute.ConfigurableOption & Schema.Attribute.MinMaxOption<number> & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"email"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<string> & Schema.Attribute.MinMaxLengthOption & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.UniqueOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"enumeration"> & Schema.Attribute.EnumerationProperties<string[]> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<string> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"float"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<number> & Schema.Attribute.MinMaxOption<number> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Schema.Attribute.UniqueOption & Record<string, any>) | (Schema.Attribute.OfType<"integer"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<number> & Schema.Attribute.MinMaxOption<number> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Schema.Attribute.UniqueOption & Record<string, any>) | (Schema.Attribute.OfType<"json"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.RequiredOption & Schema.Attribute.PrivateOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Schema.Attribute.DefaultOption<import("@strapi/types/dist/utils").JSONPrimitive> & Record<string, any>) | (Schema.Attribute.OfType<"password"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<string> & Schema.Attribute.MinMaxLengthOption & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"richtext"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<string> & Schema.Attribute.MinMaxLengthOption & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"string"> & Schema.Attribute.StringProperties & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<string> & Schema.Attribute.MinMaxLengthOption & Schema.Attribute.PrivateOption & Schema.Attribute.UniqueOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"text"> & Schema.Attribute.TextProperties & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<string> & Schema.Attribute.MinMaxLengthOption & Schema.Attribute.PrivateOption & Schema.Attribute.UniqueOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"time"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<Schema.Attribute.TimeValue> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.UniqueOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"timestamp"> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<Schema.Attribute.TimestampValue> & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.UniqueOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | (Schema.Attribute.OfType<"uid"> & Schema.Attribute.UIDProperties<string, Schema.Attribute.UIDOptions> & Schema.Attribute.ConfigurableOption & Schema.Attribute.DefaultOption<string> & Schema.Attribute.MinMaxLengthOption & Schema.Attribute.PrivateOption & Schema.Attribute.RequiredOption & Schema.Attribute.WritableOption & Schema.Attribute.VisibleOption & Record<string, any>) | {
    type: string;
    multiple: boolean;
    required: boolean;
    configurable: boolean | undefined;
    private: boolean;
    allowedTypes: Schema.Attribute.MediaKind | (Schema.Attribute.MediaKind | undefined)[] | undefined;
    pluginOptions: object | undefined;
} | {
    type: string;
    target: any;
    targetAttribute: any;
    configurable: boolean | undefined;
    private: boolean;
    pluginOptions: object | undefined;
    autoPopulate: any;
    searchable?: boolean | undefined;
    writable?: boolean | undefined;
    visible?: boolean | undefined;
    required?: boolean | undefined;
    useJoinTable?: boolean | undefined;
    relation: "morphToOne";
    multiple?: undefined;
    allowedTypes?: undefined;
} | {
    type: string;
    target: any;
    targetAttribute: any;
    configurable: boolean | undefined;
    private: boolean;
    pluginOptions: object | undefined;
    autoPopulate: any;
    searchable?: boolean | undefined;
    writable?: boolean | undefined;
    visible?: boolean | undefined;
    required?: boolean | undefined;
    useJoinTable?: boolean | undefined;
    relation: "morphToMany";
    multiple?: undefined;
    allowedTypes?: undefined;
} | {
    type: string;
    target: any;
    targetAttribute: any;
    configurable: boolean | undefined;
    private: boolean;
    pluginOptions: object | undefined;
    autoPopulate: any;
    searchable?: boolean | undefined;
    inversedBy?: string | undefined;
    mappedBy?: string | undefined;
    writable?: boolean | undefined;
    visible?: boolean | undefined;
    required?: boolean | undefined;
    useJoinTable?: boolean | undefined;
    relation: "oneToOne";
    multiple?: undefined;
    allowedTypes?: undefined;
} | {
    type: string;
    target: any;
    targetAttribute: any;
    configurable: boolean | undefined;
    private: boolean;
    pluginOptions: object | undefined;
    autoPopulate: any;
    searchable?: boolean | undefined;
    inversedBy?: string | undefined;
    mappedBy?: string | undefined;
    writable?: boolean | undefined;
    visible?: boolean | undefined;
    required?: boolean | undefined;
    useJoinTable?: boolean | undefined;
    relation: "oneToMany";
    multiple?: undefined;
    allowedTypes?: undefined;
} | {
    type: string;
    target: any;
    targetAttribute: any;
    configurable: boolean | undefined;
    private: boolean;
    pluginOptions: object | undefined;
    autoPopulate: any;
    searchable?: boolean | undefined;
    inversedBy?: string | undefined;
    mappedBy?: string | undefined;
    writable?: boolean | undefined;
    visible?: boolean | undefined;
    required?: boolean | undefined;
    useJoinTable?: boolean | undefined;
    relation: "manyToOne";
    multiple?: undefined;
    allowedTypes?: undefined;
} | {
    type: string;
    target: any;
    targetAttribute: any;
    configurable: boolean | undefined;
    private: boolean;
    pluginOptions: object | undefined;
    autoPopulate: any;
    searchable?: boolean | undefined;
    inversedBy?: string | undefined;
    mappedBy?: string | undefined;
    writable?: boolean | undefined;
    visible?: boolean | undefined;
    required?: boolean | undefined;
    useJoinTable?: boolean | undefined;
    relation: "manyToMany";
    multiple?: undefined;
    allowedTypes?: undefined;
} | {
    type: string;
    target: any;
    targetAttribute: any;
    configurable: boolean | undefined;
    private: boolean;
    pluginOptions: object | undefined;
    autoPopulate: any;
    searchable?: boolean | undefined;
    writable?: boolean | undefined;
    visible?: boolean | undefined;
    required?: boolean | undefined;
    useJoinTable?: boolean | undefined;
    relation: "oneWay";
    multiple?: undefined;
    allowedTypes?: undefined;
} | {
    type: string;
    target: any;
    targetAttribute: any;
    configurable: boolean | undefined;
    private: boolean;
    pluginOptions: object | undefined;
    autoPopulate: any;
    searchable?: boolean | undefined;
    writable?: boolean | undefined;
    visible?: boolean | undefined;
    required?: boolean | undefined;
    useJoinTable?: boolean | undefined;
    relation: "manyWay";
    multiple?: undefined;
    allowedTypes?: undefined;
} | {
    type: string;
    target: any;
    targetAttribute: any;
    configurable: boolean | undefined;
    private: boolean;
    pluginOptions: object | undefined;
    autoPopulate: any;
    searchable?: boolean | undefined;
    morphBy?: string | undefined;
    writable?: boolean | undefined;
    visible?: boolean | undefined;
    required?: boolean | undefined;
    useJoinTable?: boolean | undefined;
    relation: "morphOne";
    multiple?: undefined;
    allowedTypes?: undefined;
} | {
    type: string;
    target: any;
    targetAttribute: any;
    configurable: boolean | undefined;
    private: boolean;
    pluginOptions: object | undefined;
    autoPopulate: any;
    searchable?: boolean | undefined;
    morphBy?: string | undefined;
    writable?: boolean | undefined;
    visible?: boolean | undefined;
    required?: boolean | undefined;
    useJoinTable?: boolean | undefined;
    relation: "morphMany";
    multiple?: undefined;
    allowedTypes?: undefined;
};
export declare const replaceTemporaryUIDs: (uidMap: any) => (schema: any) => any;
//# sourceMappingURL=attributes.d.ts.map