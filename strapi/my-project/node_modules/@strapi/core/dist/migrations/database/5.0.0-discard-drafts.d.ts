import type { Database, Migration } from '@strapi/database';
type DocumentVersion = {
    documentId: string;
    locale: string;
};
type Knex = Parameters<Migration['up']>[0];
/**
 * Load a batch of versions to discard.
 *
 * Versions with only a draft version will be ignored.
 * Only versions with a published version (which always have a draft version) will be discarded.
 */
export declare function getBatchToDiscard({ db, trx, uid, batchSize, }: {
    db: Database;
    trx: Knex;
    uid: string;
    batchSize?: number;
}): AsyncGenerator<DocumentVersion[], void, unknown>;
/**
 * On V4 there was no concept of document, and an entry could be in a draft or published state.
 * But not both at the same time.
 *
 * On V5 we introduced the concept of document, and an entry can be in a draft or published state,
 * with the requirement that a document must always have a draft.
 *
 * This migration creates the document draft counterpart for all the entries that were in a published state.
 */
export declare const discardDocumentDrafts: Migration;
export {};
//# sourceMappingURL=5.0.0-discard-drafts.d.ts.map