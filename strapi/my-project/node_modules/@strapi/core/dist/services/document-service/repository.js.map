{"version":3,"file":"repository.js","sources":["../../../src/services/document-service/repository.ts"],"sourcesContent":["import { omit, assoc, merge, curry } from 'lodash/fp';\n\nimport { async, contentTypes as contentTypesUtils } from '@strapi/utils';\n\nimport { wrapInTransaction, type RepositoryFactoryMethod } from './common';\nimport * as DP from './draft-and-publish';\nimport * as i18n from './internationalization';\nimport * as components from './components';\n\nimport { createEntriesService } from './entries';\nimport { pickSelectionParams } from './params';\nimport { createDocumentId } from '../../utils/transform-content-types-to-models';\nimport { getDeepPopulate } from './utils/populate';\nimport { transformParamsToQuery } from './transform/query';\nimport { transformParamsDocumentId } from './transform/id-transform';\nimport { createEventManager } from './events';\n\nexport const createContentTypeRepository: RepositoryFactoryMethod = (uid) => {\n  const contentType = strapi.contentType(uid);\n  const hasDraftAndPublish = contentTypesUtils.hasDraftAndPublish(contentType);\n\n  const entries = createEntriesService(uid);\n\n  const eventManager = createEventManager(strapi, uid);\n  const emitEvent = curry(eventManager.emitEvent);\n\n  async function findMany(params = {} as any) {\n    const query = await async.pipe(\n      DP.defaultToDraft,\n      DP.statusToLookup(contentType),\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType),\n      transformParamsDocumentId(uid),\n      transformParamsToQuery(uid)\n    )(params || {});\n\n    return strapi.db.query(uid).findMany(query);\n  }\n\n  async function findFirst(params = {} as any) {\n    const query = await async.pipe(\n      DP.defaultToDraft,\n      DP.statusToLookup(contentType),\n      i18n.defaultLocale(contentType),\n      i18n.localeToLookup(contentType),\n      transformParamsDocumentId(uid),\n      transformParamsToQuery(uid)\n    )(params);\n\n    return strapi.db.query(uid).findOne(query);\n  }\n\n  // TODO: do we really want to add filters on the findOne now that we have findFirst ?\n  async function findOne(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const query = await async.pipe(\n      DP.defaultToDraft,\n      DP.statusToLookup(contentType),\n      i18n.defaultLocale(contentType),\n      i18n.localeToLookup(contentType),\n      transformParamsDocumentId(uid),\n      transformParamsToQuery(uid),\n      (query) => assoc('where', { ...query.where, documentId }, query)\n    )(params);\n\n    return strapi.db.query(uid).findOne(query);\n  }\n\n  async function deleteDocument(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const query = await async.pipe(\n      omit('status'),\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType),\n      transformParamsToQuery(uid),\n      (query) => assoc('where', { ...query.where, documentId }, query)\n    )(params);\n\n    if (params.status === 'draft') {\n      throw new Error('Cannot delete a draft document');\n    }\n\n    const entriesToDelete = await strapi.db.query(uid).findMany(query);\n\n    // Delete all matched entries and its components\n    const deletedEntries = await async.map(entriesToDelete, (entryToDelete: any) =>\n      entries.delete(entryToDelete.id)\n    );\n\n    entriesToDelete.forEach(emitEvent('entry.delete'));\n\n    return { documentId, entries: deletedEntries };\n  }\n\n  async function create(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const queryParams = await async.pipe(\n      DP.filterDataPublishedAt,\n      DP.setStatusToDraft(contentType),\n      DP.statusToData(contentType),\n      i18n.defaultLocale(contentType),\n      i18n.localeToData(contentType)\n    )(params);\n\n    const doc = await entries.create(queryParams);\n\n    emitEvent('entry.create', doc);\n\n    if (hasDraftAndPublish && params.status === 'published') {\n      return publish({\n        ...params,\n        documentId: doc.documentId,\n      }).then((doc) => doc.entries[0]);\n    }\n\n    return doc;\n  }\n\n  async function clone(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const queryParams = await async.pipe(\n      DP.filterDataPublishedAt,\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType)\n    )(params);\n\n    // Get deep populate\n    const entriesToClone = await strapi.db.query(uid).findMany({\n      where: {\n        ...queryParams?.lookup,\n        documentId,\n        // DP Enabled: Clone drafts\n        // DP Disabled: Clone only the existing version (published)\n        publishedAt: { $null: hasDraftAndPublish },\n      },\n      populate: getDeepPopulate(uid, { relationalFields: ['id'] }),\n    });\n\n    const clonedEntries = await async.map(\n      entriesToClone,\n      async.pipe(\n        omit('id'),\n        // assign new documentId\n        assoc('documentId', createDocumentId()),\n        // Merge new data into it\n        (data) => merge(data, queryParams.data),\n        (data) => entries.create({ ...queryParams, data, status: 'draft' })\n      )\n    );\n\n    clonedEntries.forEach(emitEvent('entry.create'));\n\n    return { documentId: clonedEntries.at(0)?.documentId, entries: clonedEntries };\n  }\n\n  async function update(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const queryParams = await async.pipe(\n      DP.filterDataPublishedAt,\n      DP.setStatusToDraft(contentType),\n      DP.statusToLookup(contentType),\n      DP.statusToData(contentType),\n      // Default locale will be set if not provided\n      i18n.defaultLocale(contentType),\n      i18n.localeToLookup(contentType),\n      i18n.localeToData(contentType)\n    )(params);\n\n    const { data, ...restParams } = await transformParamsDocumentId(uid, queryParams || {});\n    const query = transformParamsToQuery(uid, pickSelectionParams(restParams || {}) as any);\n\n    // Validation\n    // Find if document exists\n    const entryToUpdate = await strapi.db\n      .query(uid)\n      .findOne({ ...query, where: { ...queryParams?.lookup, ...query?.where, documentId } });\n\n    let updatedDraft = null;\n    if (entryToUpdate) {\n      updatedDraft = await entries.update(entryToUpdate, queryParams);\n      emitEvent('entry.update', updatedDraft);\n    }\n\n    if (!updatedDraft) {\n      const documentExists = await strapi.db\n        .query(contentType.uid)\n        .findOne({ where: { documentId } });\n\n      if (documentExists) {\n        updatedDraft = await entries.create({\n          ...queryParams,\n          data: { ...queryParams.data, documentId },\n        });\n        emitEvent('entry.create', updatedDraft);\n      }\n    }\n\n    if (hasDraftAndPublish && updatedDraft && params.status === 'published') {\n      return publish({\n        ...params,\n        documentId,\n      }).then((doc) => doc.entries[0]);\n    }\n\n    return updatedDraft;\n  }\n\n  async function count(params = {} as any) {\n    const query = await async.pipe(\n      DP.defaultStatus(contentType),\n      DP.statusToLookup(contentType),\n      i18n.defaultLocale(contentType),\n      i18n.localeToLookup(contentType),\n      transformParamsToQuery(uid)\n    )(params);\n\n    return strapi.db.query(uid).count(query);\n  }\n\n  async function publish(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const queryParams = await async.pipe(\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType)\n    )(params);\n\n    const [draftsToPublish, publishedToDelete] = await Promise.all([\n      strapi.db.query(uid).findMany({\n        where: {\n          ...queryParams?.lookup,\n          documentId,\n          publishedAt: null, // Ignore lookup\n        },\n        // Populate relations, media, compos and dz\n        populate: getDeepPopulate(uid, { relationalFields: ['documentId', 'locale'] }),\n      }),\n      strapi.db.query(uid).findMany({\n        where: {\n          ...queryParams?.lookup,\n          documentId,\n          publishedAt: { $ne: null },\n        },\n        select: ['id'],\n      }),\n    ]);\n\n    // Delete all published versions\n    await async.map(publishedToDelete, (entry: any) => entries.delete(entry.id));\n\n    // Transform draft entry data and create published versions\n    const publishedEntries = await async.map(draftsToPublish, (draft: unknown) =>\n      entries.publish(draft, queryParams)\n    );\n\n    publishedEntries.forEach(emitEvent('entry.publish'));\n    return { documentId, entries: publishedEntries };\n  }\n\n  async function unpublish(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const query = await async.pipe(\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType),\n      transformParamsToQuery(uid),\n      (query) => assoc('where', { ...query.where, documentId, publishedAt: { $ne: null } }, query)\n    )(params);\n\n    // Delete all published versions\n    const versionsToDelete = await strapi.db.query(uid).findMany(query);\n    await async.map(versionsToDelete, (entry: any) => entries.delete(entry.id));\n\n    versionsToDelete.forEach(emitEvent('entry.unpublish'));\n    return { documentId, entries: versionsToDelete };\n  }\n\n  async function discardDraft(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const queryParams = await async.pipe(\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType)\n    )(params);\n\n    const [versionsToDraft, versionsToDelete] = await Promise.all([\n      strapi.db.query(uid).findMany({\n        where: {\n          ...queryParams?.lookup,\n          documentId,\n          publishedAt: { $ne: null },\n        },\n        // Populate relations, media, compos and dz\n        populate: getDeepPopulate(uid, { relationalFields: ['documentId', 'locale'] }),\n      }),\n      strapi.db.query(uid).findMany({\n        where: {\n          ...queryParams?.lookup,\n          documentId,\n          publishedAt: null,\n        },\n        select: ['id'],\n      }),\n    ]);\n\n    // Delete all drafts\n    await async.map(versionsToDelete, (entry: any) => entries.delete(entry.id));\n\n    // Transform published entry data and create draft versions\n    const draftEntries = await async.map(versionsToDraft, (entry: any) =>\n      entries.discardDraft(entry, queryParams)\n    );\n\n    draftEntries.forEach(emitEvent('entry.draft-discard'));\n    return { documentId, entries: draftEntries };\n  }\n\n  async function updateComponents(entry: any, data: any) {\n    return components.updateComponents(uid, entry, data);\n  }\n\n  function omitComponentData(data: any) {\n    return components.omitComponentData(contentType, data);\n  }\n\n  return {\n    findMany: wrapInTransaction(findMany),\n    findFirst: wrapInTransaction(findFirst),\n    findOne: wrapInTransaction(findOne),\n    delete: wrapInTransaction(deleteDocument),\n    create: wrapInTransaction(create),\n    clone: wrapInTransaction(clone),\n    update: wrapInTransaction(update),\n    count: wrapInTransaction(count),\n    publish: hasDraftAndPublish ? wrapInTransaction(publish) : (undefined as any),\n    unpublish: hasDraftAndPublish ? wrapInTransaction(unpublish) : (undefined as any),\n    discardDraft: hasDraftAndPublish ? wrapInTransaction(discardDraft) : (undefined as any),\n\n    updateComponents,\n    omitComponentData,\n  };\n};\n"],"names":["contentTypesUtils","entries","createEntriesService","createEventManager","curry","params","query","async","DP.defaultToDraft","DP.statusToLookup","i18n.defaultLocale","i18n.multiLocaleToLookup","transformParamsDocumentId","transformParamsToQuery","i18n.localeToLookup","assoc","omit","DP.filterDataPublishedAt","DP.setStatusToDraft","DP.statusToData","i18n.localeToData","doc","getDeepPopulate","createDocumentId","merge","pickSelectionParams","DP.defaultStatus","components.updateComponents","components.omitComponentData","wrapInTransaction"],"mappings":";;;;;;;;;;;;;;;AAiBa,MAAA,8BAAuD,CAAC,QAAQ;AACrE,QAAA,cAAc,OAAO,YAAY,GAAG;AACpC,QAAA,qBAAqBA,YAAAA,aAAkB,mBAAmB,WAAW;AAErE,QAAAC,YAAUC,6BAAqB,GAAG;AAElC,QAAA,eAAeC,OAAAA,mBAAmB,QAAQ,GAAG;AAC7C,QAAA,YAAYC,GAAAA,MAAM,aAAa,SAAS;AAE/B,iBAAA,SAASC,UAAS,IAAW;AACpC,UAAAC,UAAQ,MAAMC,YAAAA,MAAM;AAAA,MACxBC,gBAAG;AAAA,MACHC,gBAAAA,eAAkB,WAAW;AAAA,MAC7BC,qBAAAA,cAAmB,WAAW;AAAA,MAC9BC,qBAAAA,oBAAyB,WAAW;AAAA,MACpCC,YAAAA,0BAA0B,GAAG;AAAA,MAC7BC,MAAAA,uBAAuB,GAAG;AAAA,IAAA,EAC1BR,WAAU,CAAA,CAAE;AAEd,WAAO,OAAO,GAAG,MAAM,GAAG,EAAE,SAASC,OAAK;AAAA,EAC5C;AAEe,iBAAA,UAAUD,UAAS,IAAW;AACrC,UAAAC,UAAQ,MAAMC,YAAAA,MAAM;AAAA,MACxBC,gBAAG;AAAA,MACHC,gBAAAA,eAAkB,WAAW;AAAA,MAC7BC,qBAAAA,cAAmB,WAAW;AAAA,MAC9BI,qBAAAA,eAAoB,WAAW;AAAA,MAC/BF,YAAAA,0BAA0B,GAAG;AAAA,MAC7BC,MAAAA,uBAAuB,GAAG;AAAA,MAC1BR,OAAM;AAER,WAAO,OAAO,GAAG,MAAM,GAAG,EAAE,QAAQC,OAAK;AAAA,EAC3C;AAGe,iBAAA,QAAQ,OAAO,IAAW;AACvC,UAAM,EAAE,YAAY,GAAGD,QAAA,IAAW;AAE5B,UAAAC,UAAQ,MAAMC,YAAAA,MAAM;AAAA,MACxBC,gBAAG;AAAA,MACHC,gBAAAA,eAAkB,WAAW;AAAA,MAC7BC,qBAAAA,cAAmB,WAAW;AAAA,MAC9BI,qBAAAA,eAAoB,WAAW;AAAA,MAC/BF,YAAAA,0BAA0B,GAAG;AAAA,MAC7BC,MAAAA,uBAAuB,GAAG;AAAA,MAC1B,CAACP,WAAUS,GAAA,MAAM,SAAS,EAAE,GAAGT,OAAM,OAAO,WAAW,GAAGA,MAAK;AAAA,MAC/DD,OAAM;AAER,WAAO,OAAO,GAAG,MAAM,GAAG,EAAE,QAAQC,OAAK;AAAA,EAC3C;AAEe,iBAAA,eAAe,OAAO,IAAW;AAC9C,UAAM,EAAE,YAAY,GAAGD,QAAA,IAAW;AAE5B,UAAAC,UAAQ,MAAMC,YAAAA,MAAM;AAAA,MACxBS,GAAAA,KAAK,QAAQ;AAAA,MACbN,qBAAAA,cAAmB,WAAW;AAAA,MAC9BC,qBAAAA,oBAAyB,WAAW;AAAA,MACpCE,MAAAA,uBAAuB,GAAG;AAAA,MAC1B,CAACP,WAAUS,GAAA,MAAM,SAAS,EAAE,GAAGT,OAAM,OAAO,WAAW,GAAGA,MAAK;AAAA,MAC/DD,OAAM;AAEJ,QAAAA,QAAO,WAAW,SAAS;AACvB,YAAA,IAAI,MAAM,gCAAgC;AAAA,IAClD;AAEM,UAAA,kBAAkB,MAAM,OAAO,GAAG,MAAM,GAAG,EAAE,SAASC,OAAK;AAG3D,UAAA,iBAAiB,MAAMC,YAAAA,MAAM;AAAA,MAAI;AAAA,MAAiB,CAAC,kBACvDN,UAAQ,OAAO,cAAc,EAAE;AAAA,IAAA;AAGjB,oBAAA,QAAQ,UAAU,cAAc,CAAC;AAE1C,WAAA,EAAE,YAAY,SAAS;EAChC;AAEe,iBAAA,OAAO,OAAO,IAAW;AACtC,UAAM,EAAE,YAAY,GAAGI,QAAA,IAAW;AAE5B,UAAA,cAAc,MAAME,YAAAA,MAAM;AAAA,MAC9BU,gBAAG;AAAA,MACHC,gBAAAA,iBAAoB,WAAW;AAAA,MAC/BC,gBAAAA,aAAgB,WAAW;AAAA,MAC3BT,qBAAAA,cAAmB,WAAW;AAAA,MAC9BU,qBAAAA,aAAkB,WAAW;AAAA,MAC7Bf,OAAM;AAER,UAAM,MAAM,MAAMJ,UAAQ,OAAO,WAAW;AAE5C,cAAU,gBAAgB,GAAG;AAEzB,QAAA,sBAAsBI,QAAO,WAAW,aAAa;AACvD,aAAO,QAAQ;AAAA,QACb,GAAGA;AAAA,QACH,YAAY,IAAI;AAAA,MAAA,CACjB,EAAE,KAAK,CAACgB,SAAQA,KAAI,QAAQ,CAAC,CAAC;AAAA,IACjC;AAEO,WAAA;AAAA,EACT;AAEe,iBAAA,MAAM,OAAO,IAAW;AACrC,UAAM,EAAE,YAAY,GAAGhB,QAAA,IAAW;AAE5B,UAAA,cAAc,MAAME,YAAAA,MAAM;AAAA,MAC9BU,gBAAG;AAAA,MACHP,qBAAAA,cAAmB,WAAW;AAAA,MAC9BC,qBAAAA,oBAAyB,WAAW;AAAA,MACpCN,OAAM;AAGR,UAAM,iBAAiB,MAAM,OAAO,GAAG,MAAM,GAAG,EAAE,SAAS;AAAA,MACzD,OAAO;AAAA,QACL,GAAG,aAAa;AAAA,QAChB;AAAA;AAAA;AAAA,QAGA,aAAa,EAAE,OAAO,mBAAmB;AAAA,MAC3C;AAAA,MACA,UAAUiB,yBAAgB,KAAK,EAAE,kBAAkB,CAAC,IAAI,GAAG;AAAA,IAAA,CAC5D;AAEK,UAAA,gBAAgB,MAAMf,YAAAA,MAAM;AAAA,MAChC;AAAA,MACAA,YAAAA,MAAM;AAAA,QACJS,GAAAA,KAAK,IAAI;AAAA;AAAA,QAETD,SAAM,cAAcQ,8BAAAA,kBAAkB;AAAA;AAAA,QAEtC,CAAC,SAASC,GAAM,MAAA,MAAM,YAAY,IAAI;AAAA,QACtC,CAAC,SAASvB,UAAQ,OAAO,EAAE,GAAG,aAAa,MAAM,QAAQ,SAAS;AAAA,MACpE;AAAA,IAAA;AAGY,kBAAA,QAAQ,UAAU,cAAc,CAAC;AAExC,WAAA,EAAE,YAAY,cAAc,GAAG,CAAC,GAAG,YAAY,SAAS;EACjE;AAEe,iBAAA,OAAO,OAAO,IAAW;AACtC,UAAM,EAAE,YAAY,GAAGI,SAAA,IAAW;AAE5B,UAAA,cAAc,MAAME,YAAAA,MAAM;AAAA,MAC9BU,gBAAG;AAAA,MACHC,gBAAAA,iBAAoB,WAAW;AAAA,MAC/BT,gBAAAA,eAAkB,WAAW;AAAA,MAC7BU,gBAAAA,aAAgB,WAAW;AAAA;AAAA,MAE3BT,qBAAAA,cAAmB,WAAW;AAAA,MAC9BI,qBAAAA,eAAoB,WAAW;AAAA,MAC/BM,qBAAAA,aAAkB,WAAW;AAAA,MAC7Bf,QAAM;AAEF,UAAA,EAAE,MAAM,GAAG,WAAW,IAAI,MAAMO,YAAAA,0BAA0B,KAAK,eAAe,CAAA,CAAE;AACtF,UAAMN,UAAQO,MAAAA,uBAAuB,KAAKY,2BAAoB,cAAc,CAAE,CAAA,CAAQ;AAIhF,UAAA,gBAAgB,MAAM,OAAO,GAChC,MAAM,GAAG,EACT,QAAQ,EAAE,GAAGnB,SAAO,OAAO,EAAE,GAAG,aAAa,QAAQ,GAAGA,SAAO,OAAO,WAAW,EAAA,CAAG;AAEvF,QAAI,eAAe;AACnB,QAAI,eAAe;AACjB,qBAAe,MAAML,UAAQ,OAAO,eAAe,WAAW;AAC9D,gBAAU,gBAAgB,YAAY;AAAA,IACxC;AAEA,QAAI,CAAC,cAAc;AACjB,YAAM,iBAAiB,MAAM,OAAO,GACjC,MAAM,YAAY,GAAG,EACrB,QAAQ,EAAE,OAAO,EAAE,WAAA,EAAc,CAAA;AAEpC,UAAI,gBAAgB;AACH,uBAAA,MAAMA,UAAQ,OAAO;AAAA,UAClC,GAAG;AAAA,UACH,MAAM,EAAE,GAAG,YAAY,MAAM,WAAW;AAAA,QAAA,CACzC;AACD,kBAAU,gBAAgB,YAAY;AAAA,MACxC;AAAA,IACF;AAEA,QAAI,sBAAsB,gBAAgBI,SAAO,WAAW,aAAa;AACvE,aAAO,QAAQ;AAAA,QACb,GAAGA;AAAAA,QACH;AAAA,MAAA,CACD,EAAE,KAAK,CAAC,QAAQ,IAAI,QAAQ,CAAC,CAAC;AAAA,IACjC;AAEO,WAAA;AAAA,EACT;AAEe,iBAAA,MAAMA,UAAS,IAAW;AACjC,UAAAC,UAAQ,MAAMC,YAAAA,MAAM;AAAA,MACxBmB,gBAAAA,cAAiB,WAAW;AAAA,MAC5BjB,gBAAAA,eAAkB,WAAW;AAAA,MAC7BC,qBAAAA,cAAmB,WAAW;AAAA,MAC9BI,qBAAAA,eAAoB,WAAW;AAAA,MAC/BD,MAAAA,uBAAuB,GAAG;AAAA,MAC1BR,OAAM;AAER,WAAO,OAAO,GAAG,MAAM,GAAG,EAAE,MAAMC,OAAK;AAAA,EACzC;AAEe,iBAAA,QAAQ,OAAO,IAAW;AACvC,UAAM,EAAE,YAAY,GAAGD,QAAA,IAAW;AAE5B,UAAA,cAAc,MAAME,YAAAA,MAAM;AAAA,MAC9BG,qBAAAA,cAAmB,WAAW;AAAA,MAC9BC,qBAAAA,oBAAyB,WAAW;AAAA,MACpCN,OAAM;AAER,UAAM,CAAC,iBAAiB,iBAAiB,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC7D,OAAO,GAAG,MAAM,GAAG,EAAE,SAAS;AAAA,QAC5B,OAAO;AAAA,UACL,GAAG,aAAa;AAAA,UAChB;AAAA,UACA,aAAa;AAAA;AAAA,QACf;AAAA;AAAA,QAEA,UAAUiB,yBAAgB,KAAK,EAAE,kBAAkB,CAAC,cAAc,QAAQ,GAAG;AAAA,MAAA,CAC9E;AAAA,MACD,OAAO,GAAG,MAAM,GAAG,EAAE,SAAS;AAAA,QAC5B,OAAO;AAAA,UACL,GAAG,aAAa;AAAA,UAChB;AAAA,UACA,aAAa,EAAE,KAAK,KAAK;AAAA,QAC3B;AAAA,QACA,QAAQ,CAAC,IAAI;AAAA,MAAA,CACd;AAAA,IAAA,CACF;AAGK,UAAAf,YAAA,MAAM,IAAI,mBAAmB,CAAC,UAAeN,UAAQ,OAAO,MAAM,EAAE,CAAC;AAGrE,UAAA,mBAAmB,MAAMM,YAAAA,MAAM;AAAA,MAAI;AAAA,MAAiB,CAAC,UACzDN,UAAQ,QAAQ,OAAO,WAAW;AAAA,IAAA;AAGnB,qBAAA,QAAQ,UAAU,eAAe,CAAC;AAC5C,WAAA,EAAE,YAAY,SAAS;EAChC;AAEe,iBAAA,UAAU,OAAO,IAAW;AACzC,UAAM,EAAE,YAAY,GAAGI,QAAA,IAAW;AAE5B,UAAAC,UAAQ,MAAMC,YAAAA,MAAM;AAAA,MACxBG,qBAAAA,cAAmB,WAAW;AAAA,MAC9BC,qBAAAA,oBAAyB,WAAW;AAAA,MACpCE,MAAAA,uBAAuB,GAAG;AAAA,MAC1B,CAACP,WAAUS,GAAM,MAAA,SAAS,EAAE,GAAGT,OAAM,OAAO,YAAY,aAAa,EAAE,KAAK,KAAK,EAAA,GAAKA,MAAK;AAAA,MAC3FD,OAAM;AAGF,UAAA,mBAAmB,MAAM,OAAO,GAAG,MAAM,GAAG,EAAE,SAASC,OAAK;AAC5D,UAAAC,YAAA,MAAM,IAAI,kBAAkB,CAAC,UAAeN,UAAQ,OAAO,MAAM,EAAE,CAAC;AAEzD,qBAAA,QAAQ,UAAU,iBAAiB,CAAC;AAC9C,WAAA,EAAE,YAAY,SAAS;EAChC;AAEe,iBAAA,aAAa,OAAO,IAAW;AAC5C,UAAM,EAAE,YAAY,GAAGI,QAAA,IAAW;AAE5B,UAAA,cAAc,MAAME,YAAAA,MAAM;AAAA,MAC9BG,qBAAAA,cAAmB,WAAW;AAAA,MAC9BC,qBAAAA,oBAAyB,WAAW;AAAA,MACpCN,OAAM;AAER,UAAM,CAAC,iBAAiB,gBAAgB,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC5D,OAAO,GAAG,MAAM,GAAG,EAAE,SAAS;AAAA,QAC5B,OAAO;AAAA,UACL,GAAG,aAAa;AAAA,UAChB;AAAA,UACA,aAAa,EAAE,KAAK,KAAK;AAAA,QAC3B;AAAA;AAAA,QAEA,UAAUiB,yBAAgB,KAAK,EAAE,kBAAkB,CAAC,cAAc,QAAQ,GAAG;AAAA,MAAA,CAC9E;AAAA,MACD,OAAO,GAAG,MAAM,GAAG,EAAE,SAAS;AAAA,QAC5B,OAAO;AAAA,UACL,GAAG,aAAa;AAAA,UAChB;AAAA,UACA,aAAa;AAAA,QACf;AAAA,QACA,QAAQ,CAAC,IAAI;AAAA,MAAA,CACd;AAAA,IAAA,CACF;AAGK,UAAAf,YAAA,MAAM,IAAI,kBAAkB,CAAC,UAAeN,UAAQ,OAAO,MAAM,EAAE,CAAC;AAGpE,UAAA,eAAe,MAAMM,YAAAA,MAAM;AAAA,MAAI;AAAA,MAAiB,CAAC,UACrDN,UAAQ,aAAa,OAAO,WAAW;AAAA,IAAA;AAG5B,iBAAA,QAAQ,UAAU,qBAAqB,CAAC;AAC9C,WAAA,EAAE,YAAY,SAAS;EAChC;AAEe,iBAAA,iBAAiB,OAAY,MAAW;AACrD,WAAO0B,4BAA4B,KAAK,OAAO,IAAI;AAAA,EACrD;AAEA,WAAS,kBAAkB,MAAW;AAC7B,WAAAC,WAA6B,kBAAA,aAAa,IAAI;AAAA,EACvD;AAEO,SAAA;AAAA,IACL,UAAUC,yBAAkB,QAAQ;AAAA,IACpC,WAAWA,yBAAkB,SAAS;AAAA,IACtC,SAASA,yBAAkB,OAAO;AAAA,IAClC,QAAQA,yBAAkB,cAAc;AAAA,IACxC,QAAQA,yBAAkB,MAAM;AAAA,IAChC,OAAOA,yBAAkB,KAAK;AAAA,IAC9B,QAAQA,yBAAkB,MAAM;AAAA,IAChC,OAAOA,yBAAkB,KAAK;AAAA,IAC9B,SAAS,qBAAqBA,OAAAA,kBAAkB,OAAO,IAAK;AAAA,IAC5D,WAAW,qBAAqBA,OAAAA,kBAAkB,SAAS,IAAK;AAAA,IAChE,cAAc,qBAAqBA,OAAAA,kBAAkB,YAAY,IAAK;AAAA,IAEtE;AAAA,IACA;AAAA,EAAA;AAEJ;;"}