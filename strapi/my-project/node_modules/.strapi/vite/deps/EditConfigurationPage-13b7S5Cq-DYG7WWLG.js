import {
  ConfigurationForm,
  TEMP_FIELD_NAME
} from "./chunk-NWJCEYDI.js";
import "./chunk-CM4K2NOT.js";
import "./chunk-A6ZFTPOG.js";
import {
  setIn
} from "./chunk-ZISB4FCW.js";
import "./chunk-Q2ZCPG4U.js";
import {
  useTypedSelector
} from "./chunk-52GTK7PI.js";
import "./chunk-3TBNZ2ES.js";
import {
  useDoc,
  useDocLayout,
  useGetInitialDataQuery,
  useUpdateContentTypeConfigurationMutation
} from "./chunk-6FMMME44.js";
import "./chunk-RPX6VIML.js";
import "./chunk-MNP7EVVJ.js";
import "./chunk-ZF5LO6AB.js";
import "./chunk-CRFUNQNX.js";
import "./chunk-ZESFYHFX.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-AZIOSPER.js";
import {
  Page,
  useAPIErrorHandler,
  useNotification,
  useTracking
} from "./chunk-HP5UMXGN.js";
import {
  useIntl
} from "./chunk-63O4EVXC.js";
import "./chunk-2JZ35VNI.js";
import "./chunk-PB4CKFDQ.js";
import "./chunk-IYHTQODQ.js";
import "./chunk-62SLUS22.js";
import {
  require_jsx_runtime
} from "./chunk-QBLEIVF7.js";
import "./chunk-SS6WRK5E.js";
import {
  require_react
} from "./chunk-BCGHH3YY.js";
import {
  __toESM
} from "./chunk-WGAPYIUP.js";

// node_modules/@strapi/content-manager/dist/_chunks/EditConfigurationPage-13b7S5Cq.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var EditConfigurationPage = () => {
  const { trackUsage } = useTracking();
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const { isLoading: isLoadingSchema, schema, model } = useDoc();
  const { isLoading: isLoadingLayout, error, list, edit } = useDocLayout();
  const {
    fieldSizes,
    error: errorFieldSizes,
    isLoading: isLoadingFieldSizes,
    isFetching: isFetchingFieldSizes
  } = useGetInitialDataQuery(void 0, {
    selectFromResult: (res) => {
      var _a;
      const fieldSizes2 = Object.entries(((_a = res.data) == null ? void 0 : _a.fieldSizes) ?? {}).reduce((acc, [attributeName, { default: size }]) => {
        acc[attributeName] = size;
        return acc;
      }, {});
      return {
        isFetching: res.isFetching,
        isLoading: res.isLoading,
        error: res.error,
        fieldSizes: fieldSizes2
      };
    }
  });
  React.useEffect(() => {
    if (errorFieldSizes) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(errorFieldSizes)
      });
    }
  }, [errorFieldSizes, formatAPIError, toggleNotification]);
  const isLoading = isLoadingSchema || isLoadingLayout || isLoadingFieldSizes || isFetchingFieldSizes;
  const [updateConfiguration] = useUpdateContentTypeConfigurationMutation();
  const handleSubmit = async (data) => {
    try {
      trackUsage("willSaveContentTypeLayout");
      const meta = Object.entries(list.metadatas).reduce(
        (acc, [name, { mainField: _mainField, ...listMeta }]) => {
          const existingEditMeta = edit.metadatas[name];
          const {
            __temp_key__,
            size: _size,
            name: _name,
            ...editedMetadata
          } = data.layout.flatMap((row) => row.children).find((field) => field.name === name) ?? {};
          acc[name] = {
            edit: {
              ...existingEditMeta,
              ...editedMetadata
            },
            list: listMeta
          };
          return acc;
        },
        {}
      );
      const res = await updateConfiguration({
        layouts: {
          edit: data.layout.map(
            (row) => row.children.reduce((acc, { name, size }) => {
              if (name !== TEMP_FIELD_NAME) {
                return [...acc, { name, size }];
              }
              return acc;
            }, [])
          ),
          list: list.layout.map((field) => field.name)
        },
        settings: setIn(data.settings, "displayName", void 0),
        metadatas: meta,
        uid: model
      });
      if ("data" in res) {
        trackUsage("didEditEditSettings");
        toggleNotification({
          type: "success",
          message: formatMessage({ id: "notification.success.saved", defaultMessage: "Saved" })
        });
      } else {
        toggleNotification({
          type: "danger",
          message: formatAPIError(res.error)
        });
      }
    } catch {
      toggleNotification({
        type: "danger",
        message: formatMessage({ id: "notification.error", defaultMessage: "An error occurred" })
      });
    }
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (errorFieldSizes || error || !schema) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(Page.Title, { children: `Configure ${edit.settings.displayName} Edit View` }),
    (0, import_jsx_runtime.jsx)(
      ConfigurationForm,
      {
        onSubmit: handleSubmit,
        attributes: schema.attributes,
        fieldSizes,
        layout: edit
      }
    )
  ] });
};
var ProtectedEditConfigurationPage = () => {
  const permissions = useTypedSelector(
    (state) => {
      var _a;
      return (_a = state.admin_app.permissions.contentManager) == null ? void 0 : _a.collectionTypesConfigurations;
    }
  );
  return (0, import_jsx_runtime.jsx)(Page.Protect, { permissions, children: (0, import_jsx_runtime.jsx)(EditConfigurationPage, {}) });
};
export {
  EditConfigurationPage,
  ProtectedEditConfigurationPage
};
//# sourceMappingURL=EditConfigurationPage-13b7S5Cq-DYG7WWLG.js.map
